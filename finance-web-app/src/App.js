import React, { useState, useEffect } from 'react';
import './App.css';

const FinanceApp = () => {
  const [bankBalance, setBankBalance] = useState(50000);
  const [cashBalance, setCashBalance] = useState(0);
  const [categories, setCategories] = useState([
    { id: 1, name: '‡∂¥‡∑ë‡∂±‡∑ä ‡∂∏‡∑í‡∂Ω‡∂Ø‡∑ì ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ä', balance: 0, target: 10000, spent: 0, unitPrice: 100 },
    { id: 2, name: '‡∂ö‡∑ë‡∂∏', balance: 0, target: 15000, spent: 0, unitPrice: 200 },
    { id: 3, name: '‡∂¥‡∑ä‚Äç‡∂ª‡∑Ä‡∑è‡∑Ñ‡∂±', balance: 0, target: 8000, spent: 0, unitPrice: 50 }
  ]);
  const [transactions, setTransactions] = useState([]);
  const [modalVisible, setModalVisible] = useState(false);
  const [categoryModalVisible, setCategoryModalVisible] = useState(false);
  const [detailsModalVisible, setDetailsModalVisible] = useState(false);
  const [currentModalType, setCurrentModalType] = useState('');
  const [editingCategory, setEditingCategory] = useState(null);
  const [viewingCategoryId, setViewingCategoryId] = useState(null);
  const [nextCategoryId, setNextCategoryId] = useState(4);

  // Form states
  const [amount, setAmount] = useState('');
  const [description, setDescription] = useState('');
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [categoryName, setCategoryName] = useState('');
  const [categoryTarget, setCategoryTarget] = useState('');
  const [categoryUnitPrice, setCategoryUnitPrice] = useState('');

  useEffect(() => {
    const savedData = localStorage.getItem('budgetTrackerWorkingV23');
    if (savedData) {
      const data = JSON.parse(savedData);
      setBankBalance(data.bankBalance || 50000);
      setCashBalance(data.cashBalance || 0);
      setCategories(data.categories || categories);
      setTransactions(data.transactions || []);
      setNextCategoryId(data.nextCategoryId || 4);
    }
  }, []);

  useEffect(() => {
    const data = {
      bankBalance,
      cashBalance,
      categories,
      transactions,
      nextCategoryId
    };
    localStorage.setItem('budgetTrackerWorkingV23', JSON.stringify(data));
  }, [bankBalance, cashBalance, categories, transactions, nextCategoryId]);

  const formatCurrency = (amount) => {
    return `‡∂ª‡∑î ${amount.toLocaleString('si-LK')}`;
  };

  const openModal = (type) => {
    setCurrentModalType(type);
    if (type === 'add-category') {
      setCategoryModalVisible(true);
    } else {
      setModalVisible(true);
    }
  };

  const closeAllModals = () => {
    setModalVisible(false);
    setCategoryModalVisible(false);
    setDetailsModalVisible(false);
    setEditingCategory(null);
    setAmount('');
    setDescription('');
    setSelectedCategory(null);
    setCategoryName('');
    setCategoryTarget('');
    setCategoryUnitPrice('');
  };

  const showCategoryDetails = (categoryId) => {
    setViewingCategoryId(categoryId);
    setDetailsModalVisible(true);
  };

  const editCategory = (categoryId) => {
    const category = categories.find(cat => cat.id === categoryId);
    if (category) {
      setEditingCategory(category);
      setCategoryName(category.name);
      setCategoryTarget(category.target.toString());
      setCategoryUnitPrice(category.unitPrice.toString());
      setCategoryModalVisible(true);
    }
  };

  const confirmDeleteCategory = (categoryId) => {
    const category = categories.find(cat => cat.id === categoryId);
    if (!category) return;

    const categoryTransactions = transactions.filter(t => 
      t.category && t.category.id === categoryId
    );

    if (window.confirm(
      `"${category.name}" ‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫ ‡∂∏‡∂ö‡∂±‡∑ä‡∂± ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫‡∂Ø?` + 
      (categoryTransactions.length > 0 ? 
        `\\n\\n‡∑É‡∂ß‡∑Ñ‡∂±: ‡∂∏‡∑ô‡∂∏ ‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫‡∂ß ‡∂Ö‡∂Ø‡∑è‡∑Ö ${categoryTransactions.length} ‡∂ú‡∂±‡∑î‡∂Ø‡∑ô‡∂±‡∑î ‡∂∏‡∂ö‡∑è ‡∂Ø‡∂∏‡∂±‡∑î ‡∂Ω‡∑ê‡∂∂‡∑ö.` : '')
    )) {
      deleteCategory(categoryId);
    }
  };

  const deleteCategory = (categoryId) => {
    const updatedCategories = categories.filter(cat => cat.id !== categoryId);
    setCategories(updatedCategories);
    
    const updatedTransactions = transactions.filter(t => 
      !t.category || t.category.id !== categoryId
    );
    setTransactions(updatedTransactions);
    
    alert('‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂∏‡∂ö‡∑è ‡∂Ø‡∂∏‡∂± ‡∂Ω‡∂Ø‡∑ì');
  };

  const handleTransactionSubmit = (e) => {
    e.preventDefault();
    const amountNum = parseFloat(amount);
    
    if (isNaN(amountNum) || amountNum <= 0) {
      alert('‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂∏‡∑î‡∂Ø‡∂Ω‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±');
      return;
    }
    
    if (currentModalType === 'income' && amountNum > bankBalance) {
      alert('‡∂∂‡∑ê‡∂Ç‡∂ö‡∑î ‡∑Å‡∑ö‡∑Ç‡∂∫ ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∑Ä‡∂≠‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ö. ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂á‡∂≠‡∑í ‡∑Å‡∑ö‡∑Ç‡∂∫: ' + formatCurrency(bankBalance));
      return;
    }
    
    if (currentModalType === 'expense' && amountNum > cashBalance) {
      alert('‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∑Å‡∑ö‡∑Ç‡∂∫ ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∑Ä‡∂≠‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ö. ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂á‡∂≠‡∑í ‡∑Å‡∑ö‡∑Ç‡∂∫: ' + formatCurrency(cashBalance));
      return;
    }
    
    if (currentModalType === 'expense' && !selectedCategory) {
      alert('‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫‡∂ö‡∑ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±');
      return;
    }

    const now = new Date();
    const dateString = now.toLocaleString('si-LK');
    const timestamp = now.getTime();

    const transaction = {
      id: timestamp,
      type: currentModalType,
      amount: amountNum,
      category: selectedCategory ? {...selectedCategory} : null,
      description,
      date: dateString,
      timestamp
    };

    if (currentModalType === 'bank-deposit') {
      setBankBalance(prev => prev + amountNum);
    } else if (currentModalType === 'income') {
      setBankBalance(prev => prev - amountNum);
      setCashBalance(prev => prev + amountNum);
    } else if (currentModalType === 'expense') {
      setCashBalance(prev => prev - amountNum);
      
      if (selectedCategory) {
        const updatedCategories = categories.map(cat => {
          if (cat.id === selectedCategory.id) {
            return {
              ...cat,
              balance: cat.balance + amountNum,
              spent: cat.spent + amountNum
            };
          }
          return cat;
        });
        setCategories(updatedCategories);
      }
    }

    setTransactions(prev => [transaction, ...prev]);
    closeAllModals();
    alert('‡∂ú‡∂±‡∑î‡∂Ø‡∑ô‡∂±‡∑î‡∑Ä ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∑É‡∂ß‡∑Ñ‡∂±‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì');
  };

  const handleCategorySubmit = (e) => {
    e.preventDefault();
    
    if (!categoryName.trim()) {
      alert('‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫‡∑ö ‡∂±‡∂∏ ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±');
      return;
    }
    
    const targetNum = parseFloat(categoryTarget);
    const unitPriceNum = parseFloat(categoryUnitPrice);
    
    if (isNaN(targetNum) || targetNum <= 0) {
      alert('‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂ú‡∑ù‡∂Ω‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±');
      return;
    }
    
    if (isNaN(unitPriceNum) || unitPriceNum <= 0) {
      alert('‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂í‡∂ö‡∂ö ‡∂∏‡∑í‡∂Ω‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±');
      return;
    }
    
    if (editingCategory) {
      const updatedCategories = categories.map(cat => 
        cat.id === editingCategory.id ? { ...cat, name: categoryName.trim(), target: targetNum, unitPrice: unitPriceNum } : cat
      );
      setCategories(updatedCategories);
      alert('‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä update ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì');
    } else {
      const newCategory = {
        id: nextCategoryId,
        name: categoryName.trim(),
        balance: 0,
        target: targetNum,
        spent: 0,
        unitPrice: unitPriceNum
      };
      setCategories(prev => [...prev, newCategory]);
      setNextCategoryId(prev => prev + 1);
      alert('‡∂±‡∑Ä ‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì');
    }
    
    closeAllModals();
  };

  const getModalTitle = () => {
    switch (currentModalType) {
      case 'bank-deposit': return '‡∂∂‡∑ê‡∂Ç‡∂ö‡∑î‡∑Ä‡∂ß ‡∂≠‡∑ê‡∂±‡∑ä‡∂¥‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±';
      case 'income': return '‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏';
      case 'expense': return '‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±';
      default: return '‡∂ú‡∂±‡∑î‡∂Ø‡∑ô‡∂±‡∑î‡∑Ä';
    }
  };

  const getInfoText = () => {
    switch (currentModalType) {
      case 'bank-deposit': 
        return '‡∂∂‡∑ê‡∂Ç‡∂ö‡∑î ‡∑Å‡∑ö‡∑Ç‡∂∫ ‡∑Ä‡∑ê‡∂©‡∑í ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∂≠‡∑ê‡∂±‡∑ä‡∂¥‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. Salary, bonus, ‡∑Ñ‡∑ù ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂Ü‡∂Ø‡∑è‡∂∫‡∂∏‡∑ä ‡∑Ä‡∂Ω‡∂ß ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.';
      case 'income': 
        return `‡∂∂‡∑ê‡∂Ç‡∂ö‡∑î ‡∑Å‡∑ö‡∑Ç‡∂∫‡∑ô‡∂±‡∑ä cash ‡∑Ä‡∂Ω‡∂ß ‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä transfer ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. ‡∂Ø‡∑ê‡∂±‡∂ß ‡∂∂‡∑ê‡∂Ç‡∂ö‡∑î ‡∑Å‡∑ö‡∑Ç‡∂∫: ${formatCurrency(bankBalance)}`;
      case 'expense': 
        return `Cash ‡∑Å‡∑ö‡∑Ç‡∂∫‡∑ô‡∂±‡∑ä ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. ‡∂Ø‡∑ê‡∂±‡∂ß cash ‡∑Å‡∑ö‡∑Ç‡∂∫: ${formatCurrency(cashBalance)}`;
      default: return '';
    }
  };

  return (
    <div className="app">
      <header className="header">
        <div>
          <h1 className="header-title">‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∂ö‡∑Ö‡∂∏‡∂±‡∑è‡∂ö‡∂ª‡∂´</h1>
          <p className="version">v2.3 - Working Version</p>
        </div>
        <span className="header-icon">üí∞</span>
      </header>
      
      <main className="content">
        <div className="balance-container">
          <div className={`balance-card ${bankBalance < 0 ? 'negative' : 'bank'}`}>
            <button className="deposit-btn" onClick={() => openModal('bank-deposit')}>+</button>
            <p className="balance-label">‡∂∂‡∑ê‡∂Ç‡∂ö‡∑î ‡∑Å‡∑ö‡∑Ç‡∂∫</p>
            <p className="balance-amount">{formatCurrency(bankBalance)}</p>
          </div>
          <div className={`balance-card ${cashBalance < 0 ? 'negative' : 'cash'}`}>
            <p className="balance-label">‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∑Å‡∑ö‡∑Ç‡∂∫</p>
            <p className="balance-amount">{formatCurrency(cashBalance)}</p>
          </div>
        </div>
        
        <div className="action-buttons">
          <button className="action-button bank-deposit" onClick={() => openModal('bank-deposit')}>
            üè¶ ‡∂∂‡∑ê‡∂Ç‡∂ö‡∑î‡∑Ä‡∂ß ‡∂≠‡∑ê‡∂±‡∑ä‡∂¥‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
          </button>
          <button className="action-button income" onClick={() => openModal('income')}>
            ‚¨áÔ∏è ‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
          </button>
          <button className="action-button expense" onClick={() => openModal('expense')}>
            ‚¨ÜÔ∏è ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
          </button>
          <button className="action-button category" onClick={() => openModal('add-category')}>
            ‚ûï ‡∂ö‡∑è‡∂´‡∑ä‡∂© ‡∂ö‡∑Ö‡∂∏‡∂±‡∑è‡∂ö‡∂ª‡∂´‡∂∫
          </button>
        </div>
        
        <section className="section">
          <div className="section-header">
            <h2 className="section-title">
              ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏‡∑ä ‡∂ö‡∑è‡∂´‡∑ä‡∂© <span className="click-hint">(Click ‡∂ö‡∂ª‡∂±‡∑ä‡∂±)</span>
            </h2>
            <button className="add-button" onClick={() => openModal('add-category')}>
              ‚ûï ‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫‡∂ö‡∑ä ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
            </button>
          </div>
          
          {categories.length === 0 ? (
            <div className="empty-state">
              <p>‡∂ö‡∑è‡∂´‡∑ä‡∂© ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠. "‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫‡∂ö‡∑ä ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±" click ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.</p>
            </div>
          ) : (
            categories.map(category => {
              const progressPercentage = category.target > 0 ? (category.spent / category.target) * 100 : 0;
              const remaining = Math.max(0, category.target - category.spent);
              
              return (
                <div key={category.id} className="category-card" onClick={() => showCategoryDetails(category.id)}>
                  <div className="click-hint-badge">CLICK</div>
                  
                  <div className="category-header">
                    <h3 className="category-name">{category.name}</h3>
                    <div className="category-actions">
                      <button onClick={(e) => { e.stopPropagation(); editCategory(category.id); }} className="edit-btn">
                        ‚úèÔ∏è
                      </button>
                      <button onClick={(e) => { e.stopPropagation(); confirmDeleteCategory(category.id); }} className="delete-btn">
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                  
                  <div className="category-balance-row">
                    <span className="category-balance">{formatCurrency(category.balance)}</span>
                    <span className="category-target">‡∂ú‡∑ù‡∂Ω‡∂∫: {formatCurrency(category.target)}</span>
                  </div>
                  
                  <p className="category-spent">
                    ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏‡∑ä: {formatCurrency(category.spent)} / {formatCurrency(category.target)}
                  </p>
                  
                  <div className="progress-bar">
                    <div 
                      className={`progress-fill ${progressPercentage > 100 ? 'overflow' : ''}`}
                      style={{ width: `${Math.min(progressPercentage, 100)}%` }}
                    />
                  </div>
                  
                  <div className="category-footer">
                    <span className="progress-text">{progressPercentage.toFixed(1)}%</span>
                    <span className="unit-price">‡∂í‡∂ö‡∂ö ‡∂∏‡∑í‡∂Ω: {formatCurrency(category.unitPrice)}</span>
                  </div>
                  
                  <p className="remaining-text">
                    ‡∂â‡∂≠‡∑í‡∂ª‡∑í: {formatCurrency(remaining)}
                  </p>
                  
                  <p className="click-hint-bottom">
                    üìä ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏‡∂ß click ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
                  </p>
                </div>
              );
            })
          )}
        </section>
        
        <section className="section">
          <h2 className="section-title">‡∂∏‡∑ë‡∂≠ ‡∂ú‡∂±‡∑î‡∂Ø‡∑ô‡∂±‡∑î</h2>
          
          {transactions.length === 0 ? (
            <div className="empty-state">
              <p>‡∂ú‡∂±‡∑î‡∂Ø‡∑ô‡∂±‡∑î ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠</p>
            </div>
          ) : (
            transactions.slice(0, 10).map(transaction => {
              let icon, amountClass, sign;
              
              if (transaction.type === 'bank-deposit') {
                icon = 'üè¶';
                amountClass = 'deposit-amount';
                sign = '+';
              } else if (transaction.type === 'income') {
                icon = '‚¨áÔ∏è';
                amountClass = 'income-amount';
                sign = '+';
              } else {
                icon = '‚¨ÜÔ∏è';
                amountClass = 'expense-amount';
                sign = '-';
              }
              
              let desc;
              if (transaction.type === 'bank-deposit') {
                desc = '‡∂∂‡∑ê‡∂Ç‡∂ö‡∑î‡∑Ä‡∂ß ‡∂≠‡∑ê‡∂±‡∑ä‡∂¥‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏';
              } else if (transaction.type === 'income') {
                desc = '‡∂∏‡∑î‡∂Ø‡∂Ω‡∑ä ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏';
              } else {
                desc = transaction.category?.name || '‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏';
              }
              
              if (transaction.description) {
                desc = transaction.description;
              }
              
              return (
                <div key={transaction.id} className="transaction-item">
                  <div className="transaction-icon">{icon}</div>
                  <div className="transaction-details">
                    <p className="transaction-description">{desc}</p>
                    <p className="transaction-date">{transaction.date}</p>
                  </div>
                  <span className={`transaction-amount ${amountClass}`}>
                    {sign}{formatCurrency(transaction.amount)}
                  </span>
                </div>
              );
            })
          )}
        </section>
      </main>
      
      {/* Transaction Modal */}
      {modalVisible && (
        <div className="modal-overlay" onClick={closeAllModals}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>{getModalTitle()}</h3>
              <button onClick={closeAllModals} className="close-btn">&times;</button>
            </div>
            
            <div className="info-box">{getInfoText()}</div>
            
            <form onSubmit={handleTransactionSubmit}>
              <label>
                ‡∂∏‡∑î‡∂Ø‡∂Ω (‡∂ª‡∑î)
                <input
                  type="number"
                  placeholder="‡∂∏‡∑î‡∂Ø‡∂Ω ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±"
                  value={amount}
                  onChange={(e) => setAmount(e.target.value)}
                  required
                />
              </label>
              
              <label>
                ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫ (‡∂Ö‡∂∏‡∂≠‡∂ª)
                <input
                  type="text"
                  placeholder="‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª‡∂∫ ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                />
              </label>
              
              {currentModalType === 'expense' && (
                <div>
                  <label>‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫ ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:</label>
                  <div className="category-selector">
                    {categories.map(category => (
                      <div
                        key={category.id}
                        className={`category-option ${selectedCategory?.id === category.id ? 'selected' : ''}`}
                        onClick={() => setSelectedCategory(category)}
                      >
                        <div>
                          <p>{category.name}</p>
                          <p className="category-option-subtext">
                            ‡∂ú‡∑ù‡∂Ω‡∂∫: {formatCurrency(category.target)} | ‡∂â‡∂≠‡∑í‡∂ª‡∑í: {formatCurrency(Math.max(0, category.target - category.spent))}
                          </p>
                        </div>
                        <p className="category-option-subtext">
                          {formatCurrency(category.spent)} / {formatCurrency(category.target)}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              <button type="submit" className={`submit-button ${currentModalType === 'bank-deposit' ? 'deposit' : ''}`}>
                ‡∑É‡∑ö‡∑Ä‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
              </button>
            </form>
          </div>
        </div>
      )}
      
      {/* Category Modal */}
      {categoryModalVisible && (
        <div className="modal-overlay" onClick={closeAllModals}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>{editingCategory ? '‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫ ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±' : '‡∂±‡∑Ä ‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫‡∂ö‡∑ä ‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±'}</h3>
              <button onClick={closeAllModals} className="close-btn">&times;</button>
            </div>
            
            <form onSubmit={handleCategorySubmit}>
              <label>
                ‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫‡∑ö ‡∂±‡∂∏
                <input
                  type="text"
                  placeholder="‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫‡∑ö ‡∂±‡∂∏ ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±"
                  value={categoryName}
                  onChange={(e) => setCategoryName(e.target.value)}
                  required
                />
              </label>
              
              <label>
                ‡∂ú‡∑ù‡∂Ω‡∂∫ (‡∂ª‡∑î)
                <input
                  type="number"
                  placeholder="‡∂ú‡∑ù‡∂Ω‡∂∫ ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±"
                  value={categoryTarget}
                  onChange={(e) => setCategoryTarget(e.target.value)}
                  required
                />
              </label>
              
              <label>
                ‡∂í‡∂ö‡∂ö ‡∂∏‡∑í‡∂Ω (‡∂ª‡∑î)
                <input
                  type="number"
                  placeholder="‡∂í‡∂ö‡∂ö ‡∂∏‡∑í‡∂Ω ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±"
                  value={categoryUnitPrice}
                  onChange={(e) => setCategoryUnitPrice(e.target.value)}
                  required
                />
              </label>
              
              <button type="submit" className="submit-button">
                {editingCategory ? 'Update ‡∂ö‡∂ª‡∂±‡∑ä‡∂±' : '‡∂ë‡∂ö‡∂≠‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±'}
              </button>
            </form>
          </div>
        </div>
      )}
      
      {/* Category Details Modal */}
      {detailsModalVisible && (
        <div className="modal-overlay" onClick={closeAllModals}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h3>{categories.find(cat => cat.id === viewingCategoryId)?.name}</h3>
              <button onClick={closeAllModals} className="close-btn">&times;</button>
            </div>
            
            {(() => {
              const category = categories.find(cat => cat.id === viewingCategoryId);
              if (!category) return null;
              
              const progressPercentage = category.target > 0 ? (category.spent / category.target) * 100 : 0;
              const remaining = Math.max(0, category.target - category.spent);
              const categoryTransactions = transactions.filter(t => 
                t.category && t.category.id === viewingCategoryId
              );
              
              return (
                <div>
                  <div className="category-card">
                    <div className="category-balance-row">
                      <span className="category-balance">{formatCurrency(category.balance)}</span>
                      <span className="category-target">‡∂ú‡∑ù‡∂Ω‡∂∫: {formatCurrency(category.target)}</span>
                    </div>
                    
                    <p className="category-spent">
                      ‡∑Ä‡∑í‡∂∫‡∂Ø‡∂∏‡∑ä: {formatCurrency(category.spent)} / {formatCurrency(category.target)}
                    </p>
                    
                    <div className="progress-bar">
                      <div 
                        className={`progress-fill ${progressPercentage > 100 ? 'overflow' : ''}`}
                        style={{ width: `${Math.min(progressPercentage, 100)}%` }}
                      />
                    </div>
                    
                    <div className="category-footer">
                      <span className="progress-text">{progressPercentage.toFixed(1)}%</span>
                      <span className="unit-price">‡∂í‡∂ö‡∂ö ‡∂∏‡∑í‡∂Ω: {formatCurrency(category.unitPrice)}</span>
                    </div>
                    
                    <p className="remaining-text">
                      ‡∂â‡∂≠‡∑í‡∂ª‡∑í: {formatCurrency(remaining)}
                    </p>
                  </div>
                  
                  <h4>‡∂ú‡∂±‡∑î‡∂Ø‡∑ô‡∂±‡∑î ‡∂â‡∂≠‡∑í‡∑Ñ‡∑è‡∑É‡∂∫</h4>
                  
                  <div className="transaction-history">
                    {categoryTransactions.length === 0 ? (
                      <div className="empty-state">
                        <p>‡∂∏‡∑ô‡∂∏ ‡∂ö‡∑è‡∂´‡∑ä‡∂©‡∂∫‡∂ß ‡∂ú‡∂±‡∑î‡∂Ø‡∑ô‡∂±‡∑î ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠</p>
                      </div>
                    ) : (
                      categoryTransactions.map(transaction => (
                        <div key={transaction.id} className="transaction-item">
                          <div className="transaction-icon">‚¨ÜÔ∏è</div>
                          <div className="transaction-details">
                            <p className="transaction-description">{transaction.description || transaction.category?.name}</p>
                            <p className="transaction-date">{transaction.date}</p>
                          </div>
                          <span className="transaction-amount expense-amount">
                            -{formatCurrency(transaction.amount)}
                          </span>
                        </div>
                      ))
                    )}
                  </div>
                </div>
              );
            })()}
          </div>
        </div>
      )}
    </div>
  );
};

export default FinanceApp;